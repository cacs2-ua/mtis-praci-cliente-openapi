/* 
 * API de Salas, Niveles, Dispositivos y Notificaciones
 *
 * Esta API permite gestionar las entidades:   - Salas: crear, borrar, modificar y consultar.   - Niveles: crear, borrar, modificar y consultar.   - Dispositivos: crear, borrar, modificar y consultar.   - Notificaciones: enviar notificaciones por email mediante los métodos:       • NotificarPresenciaSala       • NotificarUsuarioValido       • NotificarError 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Dispositivo
    /// </summary>
    [DataContract]
        public partial class Dispositivo :  IEquatable<Dispositivo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Dispositivo" /> class.
        /// </summary>
        /// <param name="id">Identificador único (autogenerado).</param>
        /// <param name="codigo">Código del dispositivo (required).</param>
        /// <param name="descripcion">Descripción del dispositivo (required).</param>
        public Dispositivo(int? id = default(int?), int? codigo = default(int?), string descripcion = default(string))
        {
            // to ensure "codigo" is required (not null)
            if (codigo == null)
            {
                throw new InvalidDataException("codigo is a required property for Dispositivo and cannot be null");
            }
            else
            {
                this.Codigo = codigo;
            }
            // to ensure "descripcion" is required (not null)
            if (descripcion == null)
            {
                throw new InvalidDataException("descripcion is a required property for Dispositivo and cannot be null");
            }
            else
            {
                this.Descripcion = descripcion;
            }
            this.Id = id;
        }
        
        /// <summary>
        /// Identificador único (autogenerado)
        /// </summary>
        /// <value>Identificador único (autogenerado)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Código del dispositivo
        /// </summary>
        /// <value>Código del dispositivo</value>
        [DataMember(Name="codigo", EmitDefaultValue=false)]
        public int? Codigo { get; set; }

        /// <summary>
        /// Descripción del dispositivo
        /// </summary>
        /// <value>Descripción del dispositivo</value>
        [DataMember(Name="descripcion", EmitDefaultValue=false)]
        public string Descripcion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Dispositivo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Codigo: ").Append(Codigo).Append("\n");
            sb.Append("  Descripcion: ").Append(Descripcion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Dispositivo);
        }

        /// <summary>
        /// Returns true if Dispositivo instances are equal
        /// </summary>
        /// <param name="input">Instance of Dispositivo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dispositivo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Codigo == input.Codigo ||
                    (this.Codigo != null &&
                    this.Codigo.Equals(input.Codigo))
                ) && 
                (
                    this.Descripcion == input.Descripcion ||
                    (this.Descripcion != null &&
                    this.Descripcion.Equals(input.Descripcion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Codigo != null)
                    hashCode = hashCode * 59 + this.Codigo.GetHashCode();
                if (this.Descripcion != null)
                    hashCode = hashCode * 59 + this.Descripcion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
