/* 
 * API de Salas, Niveles, Dispositivos y Notificaciones
 *
 * Esta API permite gestionar las entidades:   - Salas: crear, borrar, modificar y consultar.   - Niveles: crear, borrar, modificar y consultar.   - Dispositivos: crear, borrar, modificar y consultar.   - Notificaciones: enviar notificaciones por email mediante los métodos:       • NotificarPresenciaSala       • NotificarUsuarioValido       • NotificarError 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// NotificacionesErrorBody
    /// </summary>
    [DataContract]
        public partial class NotificacionesErrorBody :  IEquatable<NotificacionesErrorBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificacionesErrorBody" /> class.
        /// </summary>
        /// <param name="nif">nif.</param>
        /// <param name="error">error.</param>
        public NotificacionesErrorBody(string nif = default(string), string error = default(string))
        {
            this.Nif = nif;
            this.Error = error;
        }
        
        /// <summary>
        /// Gets or Sets Nif
        /// </summary>
        [DataMember(Name="nif", EmitDefaultValue=false)]
        public string Nif { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificacionesErrorBody {\n");
            sb.Append("  Nif: ").Append(Nif).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificacionesErrorBody);
        }

        /// <summary>
        /// Returns true if NotificacionesErrorBody instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificacionesErrorBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificacionesErrorBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Nif == input.Nif ||
                    (this.Nif != null &&
                    this.Nif.Equals(input.Nif))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Nif != null)
                    hashCode = hashCode * 59 + this.Nif.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
