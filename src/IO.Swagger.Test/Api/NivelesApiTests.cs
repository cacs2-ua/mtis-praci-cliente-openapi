/* 
 * API de Salas, Niveles, Dispositivos y Notificaciones
 *
 * Esta API permite gestionar las entidades:   - Salas: crear, borrar, modificar y consultar.   - Niveles: crear, borrar, modificar y consultar.   - Dispositivos: crear, borrar, modificar y consultar.   - Notificaciones: enviar notificaciones por email mediante los métodos:       • NotificarPresenciaSala       • NotificarUsuarioValido       • NotificarError 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing NivelesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class NivelesApiTests
    {
        private NivelesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new NivelesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of NivelesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' NivelesApi
            //Assert.IsInstanceOfType(typeof(NivelesApi), instance, "instance is a NivelesApi");
        }

        /// <summary>
        /// Test BorrarNivel
        /// </summary>
        [Test]
        public void BorrarNivelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? nivel = null;
            //var response = instance.BorrarNivel(nivel);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        /// <summary>
        /// Test ConsultarNivel
        /// </summary>
        [Test]
        public void ConsultarNivelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? nivel = null;
            //var response = instance.ConsultarNivel(nivel);
            //Assert.IsInstanceOf<Nivel> (response, "response is Nivel");
        }
        /// <summary>
        /// Test ModificarNivel
        /// </summary>
        [Test]
        public void ModificarNivelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Nivel body = null;
            //var response = instance.ModificarNivel(body);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        /// <summary>
        /// Test NuevoNivel
        /// </summary>
        [Test]
        public void NuevoNivelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Nivel body = null;
            //var response = instance.NuevoNivel(body);
            //Assert.IsInstanceOf<Nivel> (response, "response is Nivel");
        }
    }

}
