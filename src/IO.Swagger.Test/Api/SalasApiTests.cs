/* 
 * API de Salas, Niveles, Dispositivos y Notificaciones
 *
 * Esta API permite gestionar las entidades:   - Salas: crear, borrar, modificar y consultar.   - Niveles: crear, borrar, modificar y consultar.   - Dispositivos: crear, borrar, modificar y consultar.   - Notificaciones: enviar notificaciones por email mediante los métodos:       • NotificarPresenciaSala       • NotificarUsuarioValido       • NotificarError 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SalasApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SalasApiTests
    {
        private SalasApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SalasApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SalasApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SalasApi
            //Assert.IsInstanceOfType(typeof(SalasApi), instance, "instance is a SalasApi");
        }

        /// <summary>
        /// Test BorrarSala
        /// </summary>
        [Test]
        public void BorrarSalaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? codigoSala = null;
            //var response = instance.BorrarSala(codigoSala);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        /// <summary>
        /// Test ConsultarSala
        /// </summary>
        [Test]
        public void ConsultarSalaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? codigoSala = null;
            //var response = instance.ConsultarSala(codigoSala);
            //Assert.IsInstanceOf<Sala> (response, "response is Sala");
        }
        /// <summary>
        /// Test ModificarSala
        /// </summary>
        [Test]
        public void ModificarSalaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Sala body = null;
            //var response = instance.ModificarSala(body);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        /// <summary>
        /// Test NuevoSala
        /// </summary>
        [Test]
        public void NuevoSalaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Sala body = null;
            //var response = instance.NuevoSala(body);
            //Assert.IsInstanceOf<Sala> (response, "response is Sala");
        }
    }

}
